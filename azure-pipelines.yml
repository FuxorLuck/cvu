variables:
  PYTHON_VERSION: 3.7.5
  CVU_VERSION: 1.0.0

jobs:
  - job: Build
    pool:
      vmImage: windows-2019
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
          architecture: x64
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install PyInstaller
        displayName: Install dependencies
      - script: python -m PyInstaller --onefile --icon citra.ico cvu.py
        displayName: Generate exe file
      - task: CopyFiles@2
        inputs:
          SourceFolder: .
          Contents: license.txt
          TargetFolder: dist
        displayName: Copy license.txt
      - script: iscc /dMyAppVersion="$(CVU_VERSION)" cvu.iss
        displayName: Generate setup
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: dist
          includeRootFolder: false
          archiveType: zip
          archiveFile: Output/cvu.zip
          replaceExistingArchive: true
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: Output
          artifact: artifacts
          publishLocation: pipeline
      - task: GitHubRelease@1
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), not(contains(variables['Build.SourceVersionMessage'], '[skip release]')))
        inputs:
          gitHubConnection: GitHub Releases
          repositoryName: $(Build.Repository.Name)
          action: create
          target: $(Build.SourceVersion)
          tagSource: userSpecifiedTag
          tag: $(CVU_VERSION)
          assets: Output/*
          changeLogCompareToRelease: lastFullRelease
          changeLogType: commitBased
  - job: Pylint
    pool:
      vmImage: windows-2019
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
          architecture: x64
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint
        displayName: Install dependencies
      - powershell: Get-ChildItem -Path ** -Recurse *.py | foreach { pylint $_.FullName }
        displayName: Pylint
  - job: Pycodestyle
    pool:
      vmImage: windows-2019
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
          architecture: x64
      - script: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pycodestyle
        displayName: Install dependencies
      - script: pycodestyle .
        displayName: Pycodestyle
